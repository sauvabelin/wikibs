<?php

function genv($env, $def) {
    $res = getenv($env);
    if ($res) return $res;
    return $def;
}

# This file was automatically generated by the MediaWiki installer.
# If you make manual changes, please keep track in case you need to
# recreate them later.
#
# See includes/DefaultSettings.php for all configurable settings
# and their default values, but don't forget to make changes in _this_
# file, not there.

# If you customize your file layout, set $IP to the directory that contains
# the other MediaWiki files. It will be used as a base to locate files.
if( defined( 'MW_INSTALL_PATH' ) ) {
    $IP = MW_INSTALL_PATH;
} else {
    $IP = dirname( __FILE__ );
}

$path = array( $IP, "$IP/includes", "$IP/languages" );
set_include_path( implode( PATH_SEPARATOR, $path ) . PATH_SEPARATOR . get_include_path() );

# If PHP's memory limit is very low, some operations may fail.
# ini_set( 'memory_limit', '20M' );

if ( $wgCommandLineMode ) {
    if ( isset( $_SERVER ) && array_key_exists( 'REQUEST_METHOD', $_SERVER ) ) {
        die( "This script must be run from the command line\n" );
    }
}
## Uncomment this to disable output compression
# $wgDisableOutputCompression = true;
$wgSitename         = "Wiki Sauvabelin";
$wgServer = genv("PUBLIC_URI", "localhost");

## The URL base path to the directory containing the wiki;
## defaults for all runtime URL paths are based off of this.
$wgScriptPath       = "";
$wgScriptExtension  = ".php";

## For more information on customizing the URLs please see:
## http://www.mediawiki.org/wiki/Manual:Short_URL
$wgEnableEmail      = true;
$wgEnableUserEmail  = false;

$wgEmergencyContact = "it@sauvabelin.ch";
$wgPasswordSender = "it@sauvabelin.ch";

## For a detailed description of the following switches see
## http://www.mediawiki.org/wiki/Extension:Email_notification
## and http://www.mediawiki.org/wiki/Extension:Email_notification
## There are many more options for fine tuning available see
## /includes/DefaultSettings.php
## UPO means: this is also a user preference option
$wgEnotifUserTalk = false; # UPO
$wgEnotifWatchlist = false; # UPO
$wgEmailAuthentication = true;

$wgDBtype           = genv("DB_TYPE", "mysql");
$wgDBserver         = genv("DB_SERVER", "localhost");
$wgDBname           = genv("DB_NAME", "wiki");
$wgDBuser           = genv("DB_USER", "root");
$wgDBpassword       = genv("DB_PASS", "");

# MySQL specific settings
$wgDBprefix         = "";

# MySQL table options to use during installation or update
$wgDBTableOptions   = "TYPE=InnoDB";

# Experimental charset support for MySQL 4.1/5.0.
$wgDBmysql5 = false;


## Shared memory settings
$wgMainCacheType = CACHE_NONE;
$wgMemCachedServers = array();

## To enable image uploads, make sure the 'images' directory
## is writable, then set this to true:
$wgEnableUploads       = true;
# $wgUseImageMagick = true;
# $wgImageMagickConvertCommand = "/usr/bin/convert";

## If you want to use image uploads under safe mode,
## create the directories images/archive, images/thumb and
## images/temp, and make them all writable. Then uncomment
## this, if it's not already uncommented:
# $wgHashedUploadDirectory = false;

## If you have the appropriate support software installed
## you can enable inline LaTeX equations:
$wgUseTeX           = false;
$wgLocalInterwiki   = $wgSitename;
$wgLanguageCode     = "fr";
$wgProxyKey 		= "609a750b3ba4a61b6928773874902d092a350fc54504e93042f8bcf6248d474f";


## For attaching licensing metadata to pages, and displaying an
## appropriate copyright notice / icon. GNU Free Documentation
## License and Creative Commons licenses are supported so far.
# $wgEnableCreativeCommonsRdf = true;
$wgRightsPage = ""; # Set to the title of a wiki page that describes your license/copyright
$wgRightsUrl = "";
$wgRightsText = "";
$wgRightsIcon = "";
# $wgRightsCode = ""; # Not yet used

$wgDiff3 = "";

# When you make changes to this configuration file, this will make
# sure that cached pages are cleared.
$configdate = gmdate( 'YmdHis', @filemtime( __FILE__ ) );
$wgCacheEpoch = max( $wgCacheEpoch, $configdate );

$wgLogo = '/logo.png';

# il faut etre enregistre pour editer
$wgGroupPermissions['*']['read']		  = false;
$wgGroupPermissions['*']['edit']          = false;
$wgGroupPermissions['*']['createaccount'] = false;
$wgGroupPermissions['*']['autocreateaccount'] = true;

$wgGroupPermissions['user']['editmyprivateinfo'] = false;

$wgShowExceptionDetails = true;
$wgShowDBErrorBacktrace = true;

wfLoadSkin( 'Vector' );
wfLoadSkin( 'MinervaNeue' );

wfLoadExtension( 'MobileFrontend' );
$wgMFAutodetectMobileView = true;
$wgMFDefaultSkinClass = 'SkinMinerva';

wfLoadExtension( 'VisualEditor' );

wfLoadExtension( 'NetBSAuthManager' );

$wgNetBSAuthConfig = [
    'host'              => $wgDBserver,
    'database'          => genv("USER_DB_NAME", "netbs"),
    'username'          => $wgDBuser,
    'password'          => $wgDBpassword,
    'table'             => genv("AUTH_TABLE_NAME", "wiki_users"),
    'usernameColumn'    => genv("DB_USERNAME_COL", "username"),
    'hashColumn'        => genv("DB_PASS_COL", "password"),
    'saltColumn'        => genv("DB_SALT_COL", "salt"),
    'adminColumn'		=> genv("DB_ADMIN_COL", "wiki_admin"),
    'bcrypt_cost'       => intval(genv("BCRYPT_COST", "5000"))
];

// Configure AuthManager to use our NetBS provider
$wgAuthManagerConfig = [
    'primaryauth' => [
        NetBSPrimaryAuthenticationProvider::class => [
            'class' => NetBSPrimaryAuthenticationProvider::class,
            'args' => [ $wgNetBSAuthConfig ],
            'sort' => 100,
        ],
    ],
    'secondaryauth' => [],
    'preauth' => [],
];


$wgDebugLogGroups['authentication'] = '/var/log/mediawiki/auth.log';






